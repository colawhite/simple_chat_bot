{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js","components/chatbot/RoboChatbot.js"],"names":["module","exports","App","RoboChatbot","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","DBPedia","props","state","loading","result","trigger","triggetNext","bind","console","log","self","this","data","steps","search","value","xhr","XMLHttpRequest","withCredentials","addEventListener","readyState","DONE","responseText","JSON","parse","setState","out","open","setRequestHeader","send","triggerNextStep","global","Component","defaultProps","undefined","id","message","user","component","waitAction"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,2HCU5BC,MALf,WACE,OAAO,kBAACC,EAAA,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,sHE/HbC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,SAAS,EACTC,OAAQ,GACRC,SAAS,GAGX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBATF,E,wEAajBC,QAAQC,IAAI,MACZ,IAAMC,EAAOC,KAITC,EAAO,8CAHOD,KAAKV,MAAfY,MACaC,OAAOC,MAEoC,0DAC1DC,EAAM,IAAIC,eAChBD,EAAIE,iBAAkB,EACtBF,EAAIG,iBAAiB,oBAAoB,WACrC,GAAIR,KAAKS,aAAeT,KAAKU,KAAM,CAC/Bb,QAAQC,IAAIE,KAAKW,cACjB,IAAMV,EAAOW,KAAKC,MAAMb,KAAKW,cAE7BZ,EAAKe,SAAS,CAACtB,SAAQ,EAAMC,OAAOQ,EAAKc,UAGjDV,EAAIW,KAAK,OAAQ,+CACjBX,EAAIY,iBAAiB,kBAAmB,+BACxCZ,EAAIY,iBAAiB,iBAAkB,sDACvCZ,EAAIY,iBAAiB,eAAgB,qCACrCZ,EAAIa,KAAKjB,K,oCAEI,IAAD,OACZD,KAAKc,SAAS,CAAEpB,SAAS,IAAQ,WAC/B,EAAKJ,MAAM6B,uB,+BAIL,IAAD,EAC8BnB,KAAKT,MAAlCG,EADD,EACCA,QAASF,EADV,EACUA,QAASC,EADnB,EACmBA,OAG1B,OAFAI,QAAQC,IAAIJ,EAAQF,EAAQC,GAC5B2B,EAAO3B,OAASA,EAEZA,M,GA/Cc4B,aA6DtBhC,EAAQiC,aAAe,CACrBpB,WAAOqB,EACPJ,qBAAiBI,GAgCJlD,IA7BK,kBAClB,kBAAC,IAAD,CACE6B,MAAO,CACL,CACEsB,GAAI,IACJC,QAAS,sCACT/B,QAAS,UAEX,CACE8B,GAAI,SACJE,MAAM,EACNhC,QAAS,KAEX,CACE8B,GAAI,IACJG,UAAW,kBAACtC,EAAD,MACXuC,YAAY,EACZlC,QAAS,KAEX,CACE8B,GAAI,IACJC,QAAS,8BACT/B,QAAS,gB","file":"static/js/main.56d5b9bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport RoboChatbot from \"./components/chatbot/RoboChatbot\";\r\n\r\nfunction App() {\r\n  return <RoboChatbot />;\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ChatBot, { Loading } from 'react-simple-chatbot';\r\n\r\nclass DBPedia extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loading: true,\r\n      result: '',\r\n      trigger: false,\r\n    };\r\n\r\n    this.triggetNext = this.triggetNext.bind(this);\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    console.log('hi')\r\n    const self = this;\r\n    const { steps } = this.props;\r\n    const search = steps.search.value;\r\n    //var data = \"ChatSource=RapidAPI&SessionID=RapidAPI1&in=What's%202%20plus%205%3F&op=in&cbid=1&cbot=1&key=RHMN5hnQ4wTYZBGCF3dfxzypt68rVP\";\r\n    var data = \"ChatSource=RapidAPI&SessionID=RapidAPI1&in=\"+search+\"&op=in&cbid=1&cbot=1&key=RHMN5hnQ4wTYZBGCF3dfxzypt68rVP\";\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.withCredentials = false;\r\n    xhr.addEventListener(\"readystatechange\", function () {\r\n        if (this.readyState === this.DONE) {\r\n            console.log(this.responseText);\r\n            const data = JSON.parse(this.responseText);\r\n            //console.log(data)\r\n            self.setState({loading:true, result:data.out})\r\n        }\r\n    });\r\n    xhr.open(\"POST\", \"https://robomatic-ai.p.rapidapi.com/api.php\");\r\n    xhr.setRequestHeader(\"x-rapidapi-host\", \"robomatic-ai.p.rapidapi.com\");\r\n    xhr.setRequestHeader(\"x-rapidapi-key\", \"b1850caa04msh50a4d2633b67b62p16e24ajsn484a43621adc\");\r\n    xhr.setRequestHeader(\"content-type\", \"application/x-www-form-urlencoded\");\r\n    xhr.send(data);\r\n  }\r\n  triggetNext() {\r\n    this.setState({ trigger: true }, () => {\r\n      this.props.triggerNextStep();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { trigger, loading, result } = this.state;\r\n    console.log(trigger,loading,result);\r\n    global.result = result;\r\n    return (\r\n        result\r\n        \r\n      //<div className=\"dbpedia\">\r\n      // { loading ? <Loading /> : result }\r\n      //</div>\r\n    );\r\n  }\r\n}\r\n\r\nDBPedia.propTypes = {\r\n  steps: PropTypes.object,\r\n  triggerNextStep: PropTypes.func,\r\n};\r\n\r\nDBPedia.defaultProps = {\r\n  steps: undefined,\r\n  triggerNextStep: undefined,\r\n};\r\n\r\nconst RoboChatbot = () => (\r\n  <ChatBot\r\n    steps={[\r\n      {\r\n        id: '1',\r\n        message: 'Feel free to ask me any question :)',\r\n        trigger: 'search',\r\n      },\r\n      {\r\n        id: 'search',\r\n        user: true,\r\n        trigger: '3',\r\n      },\r\n      {\r\n        id: '3',\r\n        component: <DBPedia />,\r\n        waitAction: false,\r\n        trigger: '4',\r\n      },\r\n      {\r\n        id: '4',\r\n        message: 'What is your next question?',\r\n        trigger: 'search',\r\n      },\r\n    ]}\r\n  />\r\n  \r\n);\r\n\r\nexport default RoboChatbot;"],"sourceRoot":""}